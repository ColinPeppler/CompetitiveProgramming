!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
active	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        boolean active;     \/\/ PushRelabel, FordFulkerson$/;"	f	language:Java	class:ElementaryMath.Node
addFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        void addFlow(long amount) {$/;"	m	language:Java	class:ElementaryMath.Edge
addFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        void addFlow(long amount) {$/;"	m	language:Java	class:RADuty.Edge
addFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        void addFlow(long amount) {$/;"	m	language:Java	class:RADuty.Edge
addNode	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public Node addNode() {$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
addNode	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public Node addNode() {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
addNode	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public Node addNode() {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
AhujaOrlin	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        AhujaOrlin ()      { this(0); }$/;"	m	language:Java	class:ElementaryMath.AhujaOrlin
AhujaOrlin	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        AhujaOrlin (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.AhujaOrlin
AhujaOrlin	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    static class AhujaOrlin extends MaxFlowSolver$/;"	c	language:Java	class:ElementaryMath
BFS	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/FordFulkerson.java	/^	static boolean BFS(int[][] residualGraph, int S, int T, int parent[]){$/;"	m	language:Java	class:FordFulkerson
blocked	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        boolean blocked;    \/\/ Dinic$/;"	f	language:Java	class:ElementaryMath.Node
blocked	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        boolean blocked;    \/\/ Dinic$/;"	f	language:Java	class:RADuty.Node
blocked	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        boolean blocked;    \/\/ Dinic$/;"	f	language:Java	class:RADuty.Node
BlockingFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long BlockingFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.Dinic
BlockingFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long BlockingFlow(Node src, Node snk) {$/;"	m	language:Java	class:RADuty.Dinic
BlockingFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long BlockingFlow(Node src, Node snk) {$/;"	m	language:Java	class:RADuty.Dinic
capacity	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        final long capacity;$/;"	f	language:Java	class:ElementaryMath.Edge
capacity	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        final long capacity;$/;"	f	language:Java	class:RADuty.Edge
capacity	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        final long capacity;$/;"	f	language:Java	class:RADuty.Edge
compareTo	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^            public int compareTo(Item that) {$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp.Item
cost	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long cost;      \/\/ only used for MinCost.$/;"	f	language:Java	class:ElementaryMath.Edge
cost	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long cost;      \/\/ only used for MinCost.$/;"	f	language:Java	class:RADuty.Edge
cost	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long cost;      \/\/ only used for MinCost.$/;"	f	language:Java	class:RADuty.Edge
currentarc	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        int currentarc;     \/\/ AhujaOrlin$/;"	f	language:Java	class:ElementaryMath.Node
dfs	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long dfs(Node v, Node snk, long mincap) {$/;"	m	language:Java	class:ElementaryMath.Dinic
dfs	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long dfs(Node v, Node snk, long mincap) {$/;"	m	language:Java	class:RADuty.Dinic
dfs	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long dfs(Node v, Node snk, long mincap) {$/;"	m	language:Java	class:RADuty.Dinic
Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public Dinic () { this(0); }$/;"	m	language:Java	class:ElementaryMath.Dinic
Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public Dinic (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.Dinic
Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    public static class Dinic extends MaxFlowSolver$/;"	c	language:Java	class:ElementaryMath
Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public Dinic () { this(0); }$/;"	m	language:Java	class:RADuty.Dinic
Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public Dinic () { this(0); }$/;"	m	language:Java	class:RADuty.Dinic
Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public Dinic (int n) { super(n); }$/;"	m	language:Java	class:RADuty.Dinic
Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public Dinic (int n) { super(n); }$/;"	m	language:Java	class:RADuty.Dinic
Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^    public static class Dinic extends MaxFlowSolver$/;"	c	language:Java	class:RADuty
Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^    public static class Dinic extends MaxFlowSolver$/;"	c	language:Java	class:RADuty
dist	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^            long dist;$/;"	f	language:Java	class:ElementaryMath.EdmondsKarp.Item
dist	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        int dist;           \/\/ PushRelabel, Dinic, and AhujaOrlin.$/;"	f	language:Java	class:ElementaryMath.Node
dist	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        int dist;           \/\/ PushRelabel, Dinic, and AhujaOrlin.$/;"	f	language:Java	class:RADuty.Node
dist	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        int dist;           \/\/ PushRelabel, Dinic, and AhujaOrlin.$/;"	f	language:Java	class:RADuty.Node
dual	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        Edge dual;      \/\/ reference to this edge's dual$/;"	f	language:Java	class:ElementaryMath.Edge
dual	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        Edge dual;      \/\/ reference to this edge's dual$/;"	f	language:Java	class:RADuty.Edge
dual	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        Edge dual;      \/\/ reference to this edge's dual$/;"	f	language:Java	class:RADuty.Edge
Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        protected Edge(Node s, Node d, long c, boolean f)$/;"	m	language:Java	class:ElementaryMath.Edge
Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    public static class Edge$/;"	c	language:Java	class:ElementaryMath
Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        protected Edge(Node s, Node d, long c, boolean f)$/;"	m	language:Java	class:RADuty.Edge
Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        protected Edge(Node s, Node d, long c, boolean f)$/;"	m	language:Java	class:RADuty.Edge
Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^    public static class Edge$/;"	c	language:Java	class:RADuty
Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^    public static class Edge$/;"	c	language:Java	class:RADuty
edges	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        List<Edge> edges = new ArrayList<Edge>();$/;"	f	language:Java	class:ElementaryMath.Node
edges	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        List<Edge> edges = new ArrayList<Edge>();$/;"	f	language:Java	class:RADuty.Node
edges	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        List<Edge> edges = new ArrayList<Edge>();$/;"	f	language:Java	class:RADuty.Node
EdmondsKarp	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        EdmondsKarp ()      { this(0); }$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp
EdmondsKarp	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        EdmondsKarp (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp
EdmondsKarp	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    static class EdmondsKarp extends MinCostMaxFlowSolver$/;"	c	language:Java	class:ElementaryMath
ElementaryMath	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^public class ElementaryMath{$/;"	c	language:Java
ElementaryMath.AhujaOrlin	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    static class AhujaOrlin extends MaxFlowSolver$/;"	c	language:Java	class:ElementaryMath
ElementaryMath.AhujaOrlin.AhujaOrlin	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        AhujaOrlin ()      { this(0); }$/;"	m	language:Java	class:ElementaryMath.AhujaOrlin
ElementaryMath.AhujaOrlin.AhujaOrlin	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        AhujaOrlin (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.AhujaOrlin
ElementaryMath.AhujaOrlin.getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.AhujaOrlin
ElementaryMath.Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    public static class Dinic extends MaxFlowSolver$/;"	c	language:Java	class:ElementaryMath
ElementaryMath.Dinic.BlockingFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long BlockingFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.Dinic
ElementaryMath.Dinic.dfs	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long dfs(Node v, Node snk, long mincap) {$/;"	m	language:Java	class:ElementaryMath.Dinic
ElementaryMath.Dinic.Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public Dinic () { this(0); }$/;"	m	language:Java	class:ElementaryMath.Dinic
ElementaryMath.Dinic.Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public Dinic (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.Dinic
ElementaryMath.Dinic.getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.Dinic
ElementaryMath.Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    public static class Edge$/;"	c	language:Java	class:ElementaryMath
ElementaryMath.Edge.addFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        void addFlow(long amount) {$/;"	m	language:Java	class:ElementaryMath.Edge
ElementaryMath.Edge.capacity	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        final long capacity;$/;"	f	language:Java	class:ElementaryMath.Edge
ElementaryMath.Edge.cost	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long cost;      \/\/ only used for MinCost.$/;"	f	language:Java	class:ElementaryMath.Edge
ElementaryMath.Edge.dual	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        Edge dual;      \/\/ reference to this edge's dual$/;"	f	language:Java	class:ElementaryMath.Edge
ElementaryMath.Edge.Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        protected Edge(Node s, Node d, long c, boolean f)$/;"	m	language:Java	class:ElementaryMath.Edge
ElementaryMath.Edge.flow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long flow;        \/\/ current flow$/;"	f	language:Java	class:ElementaryMath.Edge
ElementaryMath.Edge.forward	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        boolean forward; \/\/ true: edge is in original graph$/;"	f	language:Java	class:ElementaryMath.Edge
ElementaryMath.Edge.from	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:ElementaryMath.Edge
ElementaryMath.Edge.remaining	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long remaining() { return capacity - flow; }$/;"	m	language:Java	class:ElementaryMath.Edge
ElementaryMath.Edge.to	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:ElementaryMath.Edge
ElementaryMath.EdmondsKarp	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    static class EdmondsKarp extends MinCostMaxFlowSolver$/;"	c	language:Java	class:ElementaryMath
ElementaryMath.EdmondsKarp.EdmondsKarp	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        EdmondsKarp ()      { this(0); }$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp
ElementaryMath.EdmondsKarp.EdmondsKarp	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        EdmondsKarp (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp
ElementaryMath.EdmondsKarp.getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp
ElementaryMath.EdmondsKarp.getMinCostMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long [] getMinCostMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp
ElementaryMath.EdmondsKarp.INF	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        static final long INF = Long.MAX_VALUE\/4;$/;"	f	language:Java	class:ElementaryMath.EdmondsKarp
ElementaryMath.EdmondsKarp.Item	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        static class Item implements Comparable<Item> {$/;"	c	language:Java	class:ElementaryMath.EdmondsKarp
ElementaryMath.EdmondsKarp.Item.compareTo	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^            public int compareTo(Item that) {$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp.Item
ElementaryMath.EdmondsKarp.Item.dist	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^            long dist;$/;"	f	language:Java	class:ElementaryMath.EdmondsKarp.Item
ElementaryMath.EdmondsKarp.Item.Item	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^            public Item(long dist, int v) {$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp.Item
ElementaryMath.EdmondsKarp.Item.v	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^            int v;$/;"	f	language:Java	class:ElementaryMath.EdmondsKarp.Item
ElementaryMath.EdmondsKarp.minCost	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long minCost;$/;"	f	language:Java	class:ElementaryMath.EdmondsKarp
ElementaryMath.FordFulkerson	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    static class FordFulkerson extends MaxFlowSolver$/;"	c	language:Java	class:ElementaryMath
ElementaryMath.FordFulkerson.findAugmentingPath	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long findAugmentingPath(Node src, Node snk, Edge [] from) {$/;"	m	language:Java	class:ElementaryMath.FordFulkerson
ElementaryMath.FordFulkerson.FordFulkerson	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        FordFulkerson ()      { this(0); }$/;"	m	language:Java	class:ElementaryMath.FordFulkerson
ElementaryMath.FordFulkerson.FordFulkerson	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        FordFulkerson (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.FordFulkerson
ElementaryMath.FordFulkerson.getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.FordFulkerson
ElementaryMath.main	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^	public static void main(String[] args){$/;"	m	language:Java	class:ElementaryMath
ElementaryMath.MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    public static abstract class MaxFlowSolver {$/;"	c	language:Java	class:ElementaryMath
ElementaryMath.MaxFlowSolver.addNode	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public Node addNode() {$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
ElementaryMath.MaxFlowSolver.getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public abstract long getMaxFlow(Node src, Node snk);$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
ElementaryMath.MaxFlowSolver.getMinCut	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        List<Edge> getMinCut(Node src) {$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
ElementaryMath.MaxFlowSolver.link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public void link(Node n1, Node n2, long capacity)$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
ElementaryMath.MaxFlowSolver.link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public void link(Node n1, Node n2, long capacity, long cost)$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
ElementaryMath.MaxFlowSolver.link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        void link(int n1, int n2, long capacity)$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
ElementaryMath.MaxFlowSolver.MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        protected MaxFlowSolver() { this(0); }$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
ElementaryMath.MaxFlowSolver.MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        protected MaxFlowSolver(int n) {$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
ElementaryMath.MaxFlowSolver.nodes	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        List<Node> nodes = new ArrayList<Node>();$/;"	f	language:Java	class:ElementaryMath.MaxFlowSolver
ElementaryMath.MinCostMaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    static abstract class MinCostMaxFlowSolver extends MaxFlowSolver {$/;"	c	language:Java	class:ElementaryMath
ElementaryMath.MinCostMaxFlowSolver.getMinCostMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        abstract long [] getMinCostMaxFlow(Node src, Node snk);$/;"	m	language:Java	class:ElementaryMath.MinCostMaxFlowSolver
ElementaryMath.MinCostMaxFlowSolver.MinCostMaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        MinCostMaxFlowSolver ()      { this(0); }$/;"	m	language:Java	class:ElementaryMath.MinCostMaxFlowSolver
ElementaryMath.MinCostMaxFlowSolver.MinCostMaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        MinCostMaxFlowSolver (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.MinCostMaxFlowSolver
ElementaryMath.Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    public static class Node {$/;"	c	language:Java	class:ElementaryMath
ElementaryMath.Node.active	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        boolean active;     \/\/ PushRelabel, FordFulkerson$/;"	f	language:Java	class:ElementaryMath.Node
ElementaryMath.Node.blocked	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        boolean blocked;    \/\/ Dinic$/;"	f	language:Java	class:ElementaryMath.Node
ElementaryMath.Node.currentarc	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        int currentarc;     \/\/ AhujaOrlin$/;"	f	language:Java	class:ElementaryMath.Node
ElementaryMath.Node.dist	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        int dist;           \/\/ PushRelabel, Dinic, and AhujaOrlin.$/;"	f	language:Java	class:ElementaryMath.Node
ElementaryMath.Node.edges	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        List<Edge> edges = new ArrayList<Edge>();$/;"	f	language:Java	class:ElementaryMath.Node
ElementaryMath.Node.excess	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long excess;        \/\/ PushRelabel$/;"	f	language:Java	class:ElementaryMath.Node
ElementaryMath.Node.index	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        int index;          \/\/ index in nodes array$/;"	f	language:Java	class:ElementaryMath.Node
ElementaryMath.Node.minCapacity	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long minCapacity;   \/\/ FordFulkerson, AhujaOrlin$/;"	f	language:Java	class:ElementaryMath.Node
ElementaryMath.Node.mindj	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        int mindj;          \/\/ AhujaOrlin$/;"	f	language:Java	class:ElementaryMath.Node
ElementaryMath.Node.Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        private Node() { }$/;"	m	language:Java	class:ElementaryMath.Node	file:
excess	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long excess;        \/\/ PushRelabel$/;"	f	language:Java	class:ElementaryMath.Node
FF	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/FordFulkerson.java	/^	static int FF(int[][] graph, int S, int T){$/;"	m	language:Java	class:FordFulkerson
findAugmentingPath	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long findAugmentingPath(Node src, Node snk, Edge [] from) {$/;"	m	language:Java	class:ElementaryMath.FordFulkerson
flow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long flow;        \/\/ current flow$/;"	f	language:Java	class:ElementaryMath.Edge
flow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long flow;        \/\/ current flow$/;"	f	language:Java	class:RADuty.Edge
flow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long flow;        \/\/ current flow$/;"	f	language:Java	class:RADuty.Edge
FordFulkerson	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        FordFulkerson ()      { this(0); }$/;"	m	language:Java	class:ElementaryMath.FordFulkerson
FordFulkerson	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        FordFulkerson (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.FordFulkerson
FordFulkerson	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    static class FordFulkerson extends MaxFlowSolver$/;"	c	language:Java	class:ElementaryMath
FordFulkerson	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/FordFulkerson.java	/^public class FordFulkerson{$/;"	c	language:Java
FordFulkerson.BFS	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/FordFulkerson.java	/^	static boolean BFS(int[][] residualGraph, int S, int T, int parent[]){$/;"	m	language:Java	class:FordFulkerson
FordFulkerson.FF	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/FordFulkerson.java	/^	static int FF(int[][] graph, int S, int T){$/;"	m	language:Java	class:FordFulkerson
FordFulkerson.main	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/FordFulkerson.java	/^	public static void main(String[] args){$/;"	m	language:Java	class:FordFulkerson
FordFulkerson.numOfVertices	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/FordFulkerson.java	/^	static int numOfVertices = 0;$/;"	f	language:Java	class:FordFulkerson
forward	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        boolean forward; \/\/ true: edge is in original graph$/;"	f	language:Java	class:ElementaryMath.Edge
forward	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        boolean forward; \/\/ true: edge is in original graph$/;"	f	language:Java	class:RADuty.Edge
forward	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        boolean forward; \/\/ true: edge is in original graph$/;"	f	language:Java	class:RADuty.Edge
from	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:ElementaryMath.Edge
from	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:RADuty.Edge
from	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:RADuty.Edge
getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public abstract long getMaxFlow(Node src, Node snk);$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.AhujaOrlin
getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.Dinic
getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp
getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.FordFulkerson
getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public abstract long getMaxFlow(Node src, Node snk);$/;"	m	language:Java	class:RADuty.MaxFlowSolver
getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public abstract long getMaxFlow(Node src, Node snk);$/;"	m	language:Java	class:RADuty.MaxFlowSolver
getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:RADuty.Dinic
getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:RADuty.Dinic
getMinCostMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        abstract long [] getMinCostMaxFlow(Node src, Node snk);$/;"	m	language:Java	class:ElementaryMath.MinCostMaxFlowSolver
getMinCostMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public long [] getMinCostMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp
getMinCut	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        List<Edge> getMinCut(Node src) {$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
getMinCut	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        List<Edge> getMinCut(Node src) {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
getMinCut	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        List<Edge> getMinCut(Node src) {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
index	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        int index;          \/\/ index in nodes array$/;"	f	language:Java	class:ElementaryMath.Node
index	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        int index;          \/\/ index in nodes array$/;"	f	language:Java	class:RADuty.Node
index	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        int index;          \/\/ index in nodes array$/;"	f	language:Java	class:RADuty.Node
INF	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        static final long INF = Long.MAX_VALUE\/4;$/;"	f	language:Java	class:ElementaryMath.EdmondsKarp
Item	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^            public Item(long dist, int v) {$/;"	m	language:Java	class:ElementaryMath.EdmondsKarp.Item
Item	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        static class Item implements Comparable<Item> {$/;"	c	language:Java	class:ElementaryMath.EdmondsKarp
link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public void link(Node n1, Node n2, long capacity)$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        public void link(Node n1, Node n2, long capacity, long cost)$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        void link(int n1, int n2, long capacity)$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public void link(Node n1, Node n2, long capacity)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public void link(Node n1, Node n2, long capacity)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public void link(Node n1, Node n2, long capacity, long cost)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public void link(Node n1, Node n2, long capacity, long cost)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        void link(int n1, int n2, long capacity)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        void link(int n1, int n2, long capacity)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
main	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^	public static void main(String[] args){$/;"	m	language:Java	class:ElementaryMath
main	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/FordFulkerson.java	/^	public static void main(String[] args){$/;"	m	language:Java	class:FordFulkerson
main	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^	public static void main(String[] args){$/;"	m	language:Java	class:RADuty
main	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^	public static void main(String[] args){$/;"	m	language:Java	class:RADuty
MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        protected MaxFlowSolver() { this(0); }$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        protected MaxFlowSolver(int n) {$/;"	m	language:Java	class:ElementaryMath.MaxFlowSolver
MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    public static abstract class MaxFlowSolver {$/;"	c	language:Java	class:ElementaryMath
MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        protected MaxFlowSolver() { this(0); }$/;"	m	language:Java	class:RADuty.MaxFlowSolver
MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        protected MaxFlowSolver() { this(0); }$/;"	m	language:Java	class:RADuty.MaxFlowSolver
MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        protected MaxFlowSolver(int n) {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        protected MaxFlowSolver(int n) {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^    public static abstract class MaxFlowSolver {$/;"	c	language:Java	class:RADuty
MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^    public static abstract class MaxFlowSolver {$/;"	c	language:Java	class:RADuty
minCapacity	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long minCapacity;   \/\/ FordFulkerson, AhujaOrlin$/;"	f	language:Java	class:ElementaryMath.Node
minCost	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long minCost;$/;"	f	language:Java	class:ElementaryMath.EdmondsKarp
MinCostMaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        MinCostMaxFlowSolver ()      { this(0); }$/;"	m	language:Java	class:ElementaryMath.MinCostMaxFlowSolver
MinCostMaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        MinCostMaxFlowSolver (int n) { super(n); }$/;"	m	language:Java	class:ElementaryMath.MinCostMaxFlowSolver
MinCostMaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    static abstract class MinCostMaxFlowSolver extends MaxFlowSolver {$/;"	c	language:Java	class:ElementaryMath
mindj	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        int mindj;          \/\/ AhujaOrlin$/;"	f	language:Java	class:ElementaryMath.Node
Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        private Node() { }$/;"	m	language:Java	class:ElementaryMath.Node	file:
Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^    public static class Node {$/;"	c	language:Java	class:ElementaryMath
Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        private Node() { }$/;"	m	language:Java	class:RADuty.Node	file:
Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        private Node() { }$/;"	m	language:Java	class:RADuty.Node	file:
Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^    public static class Node {$/;"	c	language:Java	class:RADuty
Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^    public static class Node {$/;"	c	language:Java	class:RADuty
nodes	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        List<Node> nodes = new ArrayList<Node>();$/;"	f	language:Java	class:ElementaryMath.MaxFlowSolver
nodes	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        List<Node> nodes = new ArrayList<Node>();$/;"	f	language:Java	class:RADuty.MaxFlowSolver
nodes	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        List<Node> nodes = new ArrayList<Node>();$/;"	f	language:Java	class:RADuty.MaxFlowSolver
numOfVertices	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/FordFulkerson.java	/^	static int numOfVertices = 0;$/;"	f	language:Java	class:FordFulkerson
RADuty	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^public class RADuty{$/;"	c	language:Java
RADuty	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^public class RADuty{$/;"	c	language:Java
RADuty.Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^    public static class Dinic extends MaxFlowSolver$/;"	c	language:Java	class:RADuty
RADuty.Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^    public static class Dinic extends MaxFlowSolver$/;"	c	language:Java	class:RADuty
RADuty.Dinic.BlockingFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long BlockingFlow(Node src, Node snk) {$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Dinic.BlockingFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long BlockingFlow(Node src, Node snk) {$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Dinic.dfs	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long dfs(Node v, Node snk, long mincap) {$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Dinic.dfs	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long dfs(Node v, Node snk, long mincap) {$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Dinic.Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public Dinic () { this(0); }$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Dinic.Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public Dinic () { this(0); }$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Dinic.Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public Dinic (int n) { super(n); }$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Dinic.Dinic	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public Dinic (int n) { super(n); }$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Dinic.getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Dinic.getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public long getMaxFlow(Node src, Node snk) {$/;"	m	language:Java	class:RADuty.Dinic
RADuty.Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^    public static class Edge$/;"	c	language:Java	class:RADuty
RADuty.Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^    public static class Edge$/;"	c	language:Java	class:RADuty
RADuty.Edge.addFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        void addFlow(long amount) {$/;"	m	language:Java	class:RADuty.Edge
RADuty.Edge.addFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        void addFlow(long amount) {$/;"	m	language:Java	class:RADuty.Edge
RADuty.Edge.capacity	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        final long capacity;$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.capacity	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        final long capacity;$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.cost	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long cost;      \/\/ only used for MinCost.$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.cost	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long cost;      \/\/ only used for MinCost.$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.dual	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        Edge dual;      \/\/ reference to this edge's dual$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.dual	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        Edge dual;      \/\/ reference to this edge's dual$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        protected Edge(Node s, Node d, long c, boolean f)$/;"	m	language:Java	class:RADuty.Edge
RADuty.Edge.Edge	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        protected Edge(Node s, Node d, long c, boolean f)$/;"	m	language:Java	class:RADuty.Edge
RADuty.Edge.flow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long flow;        \/\/ current flow$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.flow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long flow;        \/\/ current flow$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.forward	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        boolean forward; \/\/ true: edge is in original graph$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.forward	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        boolean forward; \/\/ true: edge is in original graph$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.from	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.from	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.remaining	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long remaining() { return capacity - flow; }$/;"	m	language:Java	class:RADuty.Edge
RADuty.Edge.remaining	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long remaining() { return capacity - flow; }$/;"	m	language:Java	class:RADuty.Edge
RADuty.Edge.to	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:RADuty.Edge
RADuty.Edge.to	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:RADuty.Edge
RADuty.main	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^	public static void main(String[] args){$/;"	m	language:Java	class:RADuty
RADuty.main	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^	public static void main(String[] args){$/;"	m	language:Java	class:RADuty
RADuty.MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^    public static abstract class MaxFlowSolver {$/;"	c	language:Java	class:RADuty
RADuty.MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^    public static abstract class MaxFlowSolver {$/;"	c	language:Java	class:RADuty
RADuty.MaxFlowSolver.addNode	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public Node addNode() {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.addNode	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public Node addNode() {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public abstract long getMaxFlow(Node src, Node snk);$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.getMaxFlow	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public abstract long getMaxFlow(Node src, Node snk);$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.getMinCut	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        List<Edge> getMinCut(Node src) {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.getMinCut	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        List<Edge> getMinCut(Node src) {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public void link(Node n1, Node n2, long capacity)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public void link(Node n1, Node n2, long capacity)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        public void link(Node n1, Node n2, long capacity, long cost)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        public void link(Node n1, Node n2, long capacity, long cost)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        void link(int n1, int n2, long capacity)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.link	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        void link(int n1, int n2, long capacity)$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        protected MaxFlowSolver() { this(0); }$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        protected MaxFlowSolver() { this(0); }$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        protected MaxFlowSolver(int n) {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.MaxFlowSolver	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        protected MaxFlowSolver(int n) {$/;"	m	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.nodes	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        List<Node> nodes = new ArrayList<Node>();$/;"	f	language:Java	class:RADuty.MaxFlowSolver
RADuty.MaxFlowSolver.nodes	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        List<Node> nodes = new ArrayList<Node>();$/;"	f	language:Java	class:RADuty.MaxFlowSolver
RADuty.Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^    public static class Node {$/;"	c	language:Java	class:RADuty
RADuty.Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^    public static class Node {$/;"	c	language:Java	class:RADuty
RADuty.Node.blocked	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        boolean blocked;    \/\/ Dinic$/;"	f	language:Java	class:RADuty.Node
RADuty.Node.blocked	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        boolean blocked;    \/\/ Dinic$/;"	f	language:Java	class:RADuty.Node
RADuty.Node.dist	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        int dist;           \/\/ PushRelabel, Dinic, and AhujaOrlin.$/;"	f	language:Java	class:RADuty.Node
RADuty.Node.dist	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        int dist;           \/\/ PushRelabel, Dinic, and AhujaOrlin.$/;"	f	language:Java	class:RADuty.Node
RADuty.Node.edges	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        List<Edge> edges = new ArrayList<Edge>();$/;"	f	language:Java	class:RADuty.Node
RADuty.Node.edges	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        List<Edge> edges = new ArrayList<Edge>();$/;"	f	language:Java	class:RADuty.Node
RADuty.Node.index	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        int index;          \/\/ index in nodes array$/;"	f	language:Java	class:RADuty.Node
RADuty.Node.index	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        int index;          \/\/ index in nodes array$/;"	f	language:Java	class:RADuty.Node
RADuty.Node.Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        private Node() { }$/;"	m	language:Java	class:RADuty.Node	file:
RADuty.Node.Node	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        private Node() { }$/;"	m	language:Java	class:RADuty.Node	file:
remaining	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        long remaining() { return capacity - flow; }$/;"	m	language:Java	class:ElementaryMath.Edge
remaining	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        long remaining() { return capacity - flow; }$/;"	m	language:Java	class:RADuty.Edge
remaining	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        long remaining() { return capacity - flow; }$/;"	m	language:Java	class:RADuty.Edge
to	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:ElementaryMath.Edge
to	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RaDuty.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:RADuty.Edge
to	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/RADuty.java	/^        Node from, to;   \/\/ nodes connected$/;"	f	language:Java	class:RADuty.Edge
v	/Users/colinpeppler/CompetitiveProgramming/MaxFlow/ElementaryMath.java	/^            int v;$/;"	f	language:Java	class:ElementaryMath.EdmondsKarp.Item
